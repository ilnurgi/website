.. py:module:: jQuery()

Методы для работы с событиями
=============================

Ме­то­ды ис­поль­зу­ют­ся для ре­ги­ст­ра­ции об­ра­бот­чи­ков со­бы­тий и для воз­бу­ж­де­ния со­бы­тий.

.. py:method:: event-type()
.. py:method:: event-type(f(event))
    
    Ре­ги­ст­ри­ру­ет f как об­ра­бот­чик со­бы­тия ти­па event-type или
    ге­не­ри­ру­ет со­бы­тие event-type.

    Биб­лио­те­ка jQuery оп­ре­де­ля­ет сле­дую­щие ме­то­ды,
    ко­то­рые дей­ст­ву­ют со­глас­но это­му шаб­ло­ну:
        
        * `ajaxComplete()`  
        
        * `ajaxError()`     
        
        * `ajaxSend()`      
        
        * `ajaxStart()`     
        
        * `ajaxStop()`      
        
        * `ajaxSuccess()`
        
        * `blur()`      
        
        * `change()`    
        
        * `click()`     
        
        * `dblclick()`  
        
        * `error()`     
        
        * `focus()`     
        
        * `focusin()`   
        
        * `focusout()`  
        
        * `keydown()`   
        
        * `keypress()`  
        
        * `keyup()`     
        
        * `load()`      
        
        * `mousedown()`   
        
        * `mouseenter()`  
        
        * `mouseleave()`  
        
        * `mousemove()`   
        
        * `mouseout()`    
        
        * `mouseover()`   
        
        * `mouseup()`
        
        * `resize()`
        
        * `scroll()`
        
        * `select()`
        
        * `submit()`
        
        * `unload()`

.. py:method:: bind(type, [data], f(event))
.. py:method:: bind(events)
    
    Ре­ги­ст­ри­ру­ет f как об­ра­бот­чик со­бы­тий ти­па type в ка­ж­дом вы­бран­ном эле­мен­те.

    Ес­ли ука­зан ар­гу­мент data, он бу­дет до­бав­лен в объ­ект со­бы­тия пе­ред вы­зо­вом f.

    Ар­гу­мент type мо­жет оп­ре­де­лять не­сколь­ко ти­пов со­бы­тий и
    мо­жет вклю­чать про­стран­ст­ва имен.

    Ес­ли ме­то­ду пе­ре­дан един­ст­вен­ный объ­ект,
    он ин­тер­пре­ти­ру­ет его как ото­бра­же­ние ти­пов со­бы­тий в функ­ции-об­ра­бот­чи­ки и
    ре­ги­ст­ри­ру­ет об­ра­бот­чи­ки для всех ука­зан­ных ти­пов со­бы­тий
    в ка­ж­дом вы­бран­ном эле­мен­те.


.. py:method:: delegate(sel, type, [data], f(event))
    
    Ре­ги­ст­ри­ру­ет f как ди­на­ми­че­ский об­ра­бот­чик со­бы­тия.

    Функ­ция f бу­дет вы­зы­вать­ся для об­ра­бот­ки со­бы­тий ти­па type,
    воз­ни­каю­щих в эле­мен­тах,
    ко­то­рые оп­ре­де­ля­ют­ся се­лек­то­ром sel и
    всплыв­ших до лю­бо­го из вы­бран­ных эле­мен­тов.

    Ес­ли ука­зан ар­гу­мент data, он бу­дет до­бав­лен в объ­ект со­бы­тия пе­ред вы­зо­вом f.


.. py:method:: die(type, [f(event)])
    
    От­клю­ча­ет ди­на­ми­че­ские об­ра­бот­чи­ки, за­ре­ги­ст­ри­ро­ван­ные ме­то­дом live(),
    со­бы­тий ти­па type из эле­мен­тов, со­от­вет­ст­вую­щих се­лек­то­ру,
    ис­поль­зо­вав­ше­му­ся для соз­да­ния те­ку­ще­го мно­же­ст­ва вы­бран­ных эле­мен­тов.

    Ес­ли ука­за­на кон­крет­ная функ­ция-об­ра­бот­чик f, от­клю­ча­ет толь­ко ее.


.. py:method:: hover(f(event))
.. py:method:: hover(enter(event), leave(event))

    Ре­ги­ст­ри­ру­ет об­ра­бот­чи­ки со­бы­тий «mouseenter» и «mouseleave»
    во всех вы­бран­ных эле­мен­тах.

    Ес­ли ука­за­на толь­ко од­на функ­ция,
    она бу­дет ис­поль­зо­ва­на как об­ра­бот­чик обо­их со­бы­тий.


.. py:method:: live(type, [data], f(event))
    
    Ре­ги­ст­ри­ру­ет f как ди­на­ми­че­ский об­ра­бот­чик со­бы­тия ти­па type.

    Ес­ли ука­зан ар­гу­мент data, он бу­дет до­бав­лен в объ­ект со­бы­тия пе­ред вы­зо­вом f.

    Этот ме­тод неис­поль­зу­ет­ся для ус­та­нов­ки об­ра­бот­чи­ков в вы­бран­ные эле­мен­ты,
    но он ис­поль­зу­ет стро­ку се­лек­то­ра и кон­текст дан­но­го объ­ек­та jQuery.

    Функ­ция f бу­дет вы­зы­вать­ся,
    ко­гда со­бы­тия ти­па type бу­дут всплы­вать до объ­ек­та кон­тек­ста
    (обыч­но объ­ектdocument),
    ес­ли це­ле­вые эле­мен­ты со­бы­тия бу­дут со­от­вет­ст­во­вать се­лек­то­ру.


.. py:method:: mouseout(callback)

    Обработчик вывода мыши из элемента

    .. code-block:: js

        jq_elem.mouseout(function(){
            //
        });


.. py:method:: mouseover(callback)

    Обработчик наведение мыши

    .. code-block:: js

        jq_elem.mouseover(function(){
            //
        });


.. py:method:: one(type, [data], f(event))
.. py:method:: one(events)
    
    Дей­ст­ву­ет по­доб­но ме­то­ду bind(),
    но за­ре­ги­ст­ри­ро­ван­ные об­ра­бот­чи­ки со­бы­тий ав­то­ма­ти­че­ски от­клю­ча­ют­ся
    по­сле од­но­крат­но­го вы­зо­ва.


.. py:method:: ready(f())
    
    Ре­ги­ст­ри­ру­ет функ­цию f, ко­то­рая долж­на быть вы­зва­на,
    ко­гда до­ку­мент бу­дет го­тов к вы­пол­не­нию опе­ра­ций над ним,
    или вы­зы­ва­ет ее не­мед­лен­но, ес­ли до­ку­мент уже го­тов.

    Этот ме­тод не ис­поль­зу­ет вы­бран­ные эле­мен­ты и яв­ля­ет­ся си­но­ни­мом для $(f).


.. py:method:: trigger(type, [params])
.. py:method:: trigger(event)
    
    Ге­не­ри­ру­ет со­бы­тие type во всех вы­бран­ных эле­мен­тах,
    пе­ре­да­вая params об­ра­бот­чи­кам со­бы­тий в ви­де до­пол­ни­тель­ных па­ра­мет­ров.

    Ар­гу­мент params мож­но опус­тить или пе­ре­дать в нем един­ст­вен­ное зна­че­ние или
    мас­сив зна­че­ний.

    Ес­ли пе­ре­дать ме­то­ду объ­ект со­бы­тия event,
    его свой­ст­во type бу­дет оп­ре­де­лять тип со­бы­тия,
    а все ос­таль­ные свой­ст­ва бу­дут ско­пи­ро­ва­ны в объ­ект со­бы­тия,
    ко­то­рый бу­дет пе­ре­дан об­ра­бот­чи­кам.


.. py:method:: triggerHandler(type, [params])
    
    Дей­ст­ву­ет по­доб­но ме­то­ду trigger(),
    но не по­зво­ля­ет всплы­вать сге­не­ри­ро­ван­но­му со­бы­тию или вы­зы­вать дей­ст­вия,
    пре­ду­смот­рен­ные бро­узе­ром по умол­ча­нию.


.. py:method:: unbind([type],[f(event)])
    
    При вы­зо­ве без ар­гу­мен­тов от­клю­ча­ет все об­ра­бот­чи­ки со­бы­тий,
    за­ре­ги­ст­ри­ро­ван­ные сред­ст­ва­ми биб­лио­те­ки jQuery во всех вы­бран­ных эле­мен­тах.

    При вы­зо­вес од­ним ар­гу­мен­том от­клю­ча­ет все об­ра­бот­чи­ки со­бы­тий ти­па type
    во всех вы­бран­ных эле­мен­тах.

    При вы­зо­ве с дву­мя ар­гу­мен­та­ми от­клю­ча­ет функ­цию f,
    за­ре­ги­ст­ри­ро­ван­ную как об­ра­бот­чик со­бы­тий type во всех вы­бран­ных эле­мен­тах.

    Ар­гу­мент type мо­жет пред­став­лять не­сколь­ко ти­пов со­бы­тий и
    мо­жет вклю­чать про­стран­ст­ва имен.


.. py:method:: undelegate()
.. py:method:: undelegate(sel, type, [f(event)])

    При вы­зо­ве без ар­гу­мен­тов от­клю­ча­ет все ди­на­ми­че­ские об­ра­бот­чи­ки со­бы­тий
    во всех вы­бран­ных эле­мен­тах.

    При вы­зо­ве с дву­мя ар­гу­мен­та­ми от­клю­ча­ет ди­на­миче­ские об­ра­бот­чи­ки со­бы­тий
    ти­па type в эле­мен­тах, со­от­вет­ст­вую­щих се­лек­то­ру sel,
    ко­то­рые воз­ни­ка­ют в вы­бран­ных эле­мен­тах.

    При вы­зо­ве с тре­мя ар­гу­мен­та­миот­клю­ча­ет толь­ко об­ра­бот­чик f.